import email
from _typeshed import Incomplete
from dataclasses import dataclass
from sage_imap.helpers.enums import Flag as Flag
from sage_imap.helpers.typings import (
    EmailAddress as EmailAddress,
    EmailDate as EmailDate,
)
from typing import Any, Callable

logger: Incomplete

@dataclass
class Attachment:
    filename: str
    content_type: str
    payload: bytes = ...
    id: str | None = ...
    content_id: str | None = ...
    content_transfer_encoding: str | None = ...
    def __init__(
        self,
        filename,
        content_type,
        payload,
        id=...,
        content_id=...,
        content_transfer_encoding=...,
    ) -> None: ...

@dataclass
class EmailMessage:
    message_id: str = ...
    subject: str = ...
    from_address: EmailAddress | None = ...
    to_address: list[EmailAddress] = ...
    cc_address: list[EmailAddress] = ...
    bcc_address: list[EmailAddress] = ...
    date: EmailDate | None = ...
    raw: bytes | None = ...
    plain_body: str = ...
    html_body: str = ...
    attachments: list[Attachment] = ...
    flags: list[Flag] = ...
    headers: dict[str, Any] = ...
    size: int = ...
    sequence_number: int | None = ...
    uid: int | None = ...
    def __post_init__(self) -> None: ...
    @classmethod
    def read_from_eml_file(cls, file_path: str) -> EmailMessage: ...
    @classmethod
    def read_from_eml_bytes(cls, eml_bytes: bytes) -> EmailMessage: ...
    def parse_eml_content(self) -> None: ...
    def sanitize_message_id(self, message_id: str) -> str | None: ...
    def parse_date(self, date_str: str | None) -> EmailDate | None: ...
    def extract_body(self, message: email.message.EmailMessage) -> tuple[str, str]: ...
    def extract_attachments(
        self, message: email.message.EmailMessage
    ) -> list[Attachment]: ...
    @staticmethod
    def extract_flags(flag_data: bytes) -> list[Flag]: ...
    def decode_payload(self, part: email.message.EmailMessage) -> str: ...
    def has_attachments(self) -> bool: ...
    def get_attachment_filenames(self) -> list[str]: ...
    def write_to_eml_file(self, file_path: str) -> None: ...
    def __init__(
        self,
        message_id,
        subject=...,
        from_address=...,
        to_address=...,
        cc_address=...,
        bcc_address=...,
        date=...,
        raw=...,
        plain_body=...,
        html_body=...,
        attachments=...,
        flags=...,
        headers=...,
        size=...,
        sequence_number=...,
        uid=...,
    ) -> None: ...

class EmailIterator:
    def __init__(self, email_list: list[EmailMessage]) -> None: ...
    def __iter__(self) -> EmailIterator: ...
    def __next__(self) -> EmailMessage: ...
    def __getitem__(self, index: int | slice) -> EmailMessage | EmailIterator: ...
    def __len__(self) -> int: ...
    def reset(self) -> None: ...
    def current_position(self) -> int: ...
    def __reversed__(self) -> EmailIterator: ...
    def __contains__(self, item: EmailMessage) -> bool: ...
    def count(self, condition: Callable[[EmailMessage], bool]) -> int: ...
    def filter(self, criteria: Callable[[EmailMessage], bool]) -> EmailIterator: ...
    def filter_by_header(self, key: str) -> EmailIterator: ...
    def filter_by_subject_part(self, part: str) -> EmailIterator: ...
    def find_by_message_id(self, message_id: str) -> EmailMessage | None: ...
    def filter_by_attachment(self) -> EmailIterator: ...
    def get_total_size(self) -> int: ...

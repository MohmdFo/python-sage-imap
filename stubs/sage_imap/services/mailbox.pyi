from _typeshed import Incomplete
from sage_imap.helpers.enums import Flag, MailboxStatusItems, MessagePart
from sage_imap.helpers.search import IMAPSearchCriteria
from sage_imap.helpers.typings import Mailbox, MessageIDList, RawEmail
from sage_imap.models.email import EmailIterator, EmailMessage
from sage_imap.models.message import MessageSet
from sage_imap.services.client import IMAPClient
from typing import Any

__all__ = ["IMAPMailboxService"]

class BaseMailboxService:
    client: Incomplete
    current_selection: Incomplete
    def __init__(self, client: IMAPClient) -> None: ...
    def __enter__(self): ...
    def __exit__(
        self,
        exc_type: type | None,
        exc_value: BaseException | None,
        traceback: Any | None,
    ) -> None: ...
    def select(self, mailbox: str | None): ...
    def close(self) -> None: ...
    def check(self) -> None: ...
    def status(self, mailbox: Mailbox, *status_items: MailboxStatusItems): ...

class IMAPMailboxService(BaseMailboxService):
    def search(
        self, criteria: IMAPSearchCriteria, charset: str | None = "UTF-8"
    ) -> MessageIDList: ...
    def trash(self, msg_set: MessageSet, trash_mailbox: Mailbox): ...
    def delete(self, msg_set: MessageSet, trash_mailbox: Mailbox): ...
    def move(self, msg_set: MessageSet, destination_mailbox: Mailbox): ...
    def restore(
        self, msg_set: MessageSet, trash_mailbox: Mailbox, safe_mailbox: Mailbox
    ): ...
    def fetch(self, msg_set: MessageSet, msg_part: MessagePart): ...
    def save_sent(
        self,
        sent_mailbox: Mailbox,
        raw: RawEmail,
        flags: Flag = None,
        date_time: str = None,
    ): ...
    def upload_eml(
        self, emails: EmailIterator | list[EmailMessage], flags: Flag, mailbox: Mailbox
    ): ...

class IMAPMailboxUIDService(BaseMailboxService):
    def uid_search(
        self, criteria: IMAPSearchCriteria, charset: str | None = "UTF-8"
    ) -> MessageIDList: ...
    def uid_trash(self, msg_set: MessageSet, trash_mailbox: Mailbox): ...
    def uid_delete(self, msg_set: MessageSet, trash_mailbox: Mailbox): ...
    def uid_move(self, msg_set: MessageSet, destination_mailbox: Mailbox): ...
    def uid_restore(
        self, msg_set: MessageSet, trash_mailbox: Mailbox, safe_mailbox: Mailbox
    ): ...
    def uid_fetch(self, msg_set: MessageSet, msg_part: MessagePart): ...
